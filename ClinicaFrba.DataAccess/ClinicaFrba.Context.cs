//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicaFrba.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Afiliado> Afiliadoes { get; set; }
        public virtual DbSet<Agendum> Agenda { get; set; }
        public virtual DbSet<Bono> Bonoes { get; set; }
        public virtual DbSet<Compra> Compras { get; set; }
        public virtual DbSet<ConsultaMedica> ConsultaMedicas { get; set; }
        public virtual DbSet<Diagnostico> Diagnosticoes { get; set; }
        public virtual DbSet<Especialidad> Especialidads { get; set; }
        public virtual DbSet<EstadoCivil> EstadoCivils { get; set; }
        public virtual DbSet<Funcionalidad> Funcionalidads { get; set; }
        public virtual DbSet<HistorialPlan> HistorialPlans { get; set; }
        public virtual DbSet<Hora> Horas { get; set; }
        public virtual DbSet<PlanMedico> PlanMedicoes { get; set; }
        public virtual DbSet<Profesional> Profesionals { get; set; }
        public virtual DbSet<Rol> Rols { get; set; }
        public virtual DbSet<Sintoma> Sintomas { get; set; }
        public virtual DbSet<TipoEspecialidad> TipoEspecialidads { get; set; }
        public virtual DbSet<Turno> Turnoes { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<ListaAfiliado> ListaAfiliados { get; set; }
        public virtual DbSet<ListaEspecialidade> ListaEspecialidades { get; set; }
        public virtual DbSet<ListaFuncionalidade> ListaFuncionalidades { get; set; }
        public virtual DbSet<ListaHorasSabado> ListaHorasSabadoes { get; set; }
        public virtual DbSet<ListaHorasSemana> ListaHorasSemanas { get; set; }
        public virtual DbSet<ListaRole> ListaRoles { get; set; }
        public virtual DbSet<ListaTipoDocumento> ListaTipoDocumentoes { get; set; }
        public virtual DbSet<ListaTipoEspecialidade> ListaTipoEspecialidades { get; set; }
    
        [DbFunction("Entities", "AfiliadoBy")]
        public virtual IQueryable<AfiliadoBy_Result> AfiliadoBy(string tipoDocumento, Nullable<int> nroDocumento)
        {
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("tipoDocumento", tipoDocumento) :
                new ObjectParameter("tipoDocumento", typeof(string));
    
            var nroDocumentoParameter = nroDocumento.HasValue ?
                new ObjectParameter("nroDocumento", nroDocumento) :
                new ObjectParameter("nroDocumento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AfiliadoBy_Result>("[Entities].[AfiliadoBy](@tipoDocumento, @nroDocumento)", tipoDocumentoParameter, nroDocumentoParameter);
        }
    
        [DbFunction("Entities", "AfiliadoDeUsuario")]
        public virtual IQueryable<AfiliadoDeUsuario_Result> AfiliadoDeUsuario(Nullable<int> usuarioId)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AfiliadoDeUsuario_Result>("[Entities].[AfiliadoDeUsuario](@usuarioId)", usuarioIdParameter);
        }
    
        [DbFunction("Entities", "BonosNroAfiliado")]
        public virtual IQueryable<BonosNroAfiliado_Result> BonosNroAfiliado(Nullable<int> nroAfiliado)
        {
            var nroAfiliadoParameter = nroAfiliado.HasValue ?
                new ObjectParameter("nroAfiliado", nroAfiliado) :
                new ObjectParameter("nroAfiliado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<BonosNroAfiliado_Result>("[Entities].[BonosNroAfiliado](@nroAfiliado)", nroAfiliadoParameter);
        }
    
        [DbFunction("Entities", "EspecialidadesDeProfesional")]
        public virtual IQueryable<EspecialidadesDeProfesional_Result> EspecialidadesDeProfesional(Nullable<int> profesionalId)
        {
            var profesionalIdParameter = profesionalId.HasValue ?
                new ObjectParameter("profesionalId", profesionalId) :
                new ObjectParameter("profesionalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<EspecialidadesDeProfesional_Result>("[Entities].[EspecialidadesDeProfesional](@profesionalId)", profesionalIdParameter);
        }
    
        [DbFunction("Entities", "EspecialidadesDeTipo")]
        public virtual IQueryable<EspecialidadesDeTipo_Result> EspecialidadesDeTipo(Nullable<int> tipoEspecialidad)
        {
            var tipoEspecialidadParameter = tipoEspecialidad.HasValue ?
                new ObjectParameter("tipoEspecialidad", tipoEspecialidad) :
                new ObjectParameter("tipoEspecialidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<EspecialidadesDeTipo_Result>("[Entities].[EspecialidadesDeTipo](@tipoEspecialidad)", tipoEspecialidadParameter);
        }
    
        [DbFunction("Entities", "FechasDisponibles")]
        public virtual IQueryable<FechasDisponibles_Result> FechasDisponibles(Nullable<int> profesionalId, Nullable<int> especialidadId)
        {
            var profesionalIdParameter = profesionalId.HasValue ?
                new ObjectParameter("profesionalId", profesionalId) :
                new ObjectParameter("profesionalId", typeof(int));
    
            var especialidadIdParameter = especialidadId.HasValue ?
                new ObjectParameter("especialidadId", especialidadId) :
                new ObjectParameter("especialidadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FechasDisponibles_Result>("[Entities].[FechasDisponibles](@profesionalId, @especialidadId)", profesionalIdParameter, especialidadIdParameter);
        }
    
        [DbFunction("Entities", "ProfesionalDeUsuario")]
        public virtual IQueryable<ProfesionalDeUsuario_Result> ProfesionalDeUsuario(Nullable<int> usuarioId)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ProfesionalDeUsuario_Result>("[Entities].[ProfesionalDeUsuario](@usuarioId)", usuarioIdParameter);
        }
    
        [DbFunction("Entities", "ProfesionalesDeEspecialidad")]
        public virtual IQueryable<ProfesionalesDeEspecialidad_Result> ProfesionalesDeEspecialidad(Nullable<int> especialidad)
        {
            var especialidadParameter = especialidad.HasValue ?
                new ObjectParameter("especialidad", especialidad) :
                new ObjectParameter("especialidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ProfesionalesDeEspecialidad_Result>("[Entities].[ProfesionalesDeEspecialidad](@especialidad)", especialidadParameter);
        }
    
        [DbFunction("Entities", "RolesDeUsuario")]
        public virtual IQueryable<RolesDeUsuario_Result> RolesDeUsuario(Nullable<int> usuarioId)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<RolesDeUsuario_Result>("[Entities].[RolesDeUsuario](@usuarioId)", usuarioIdParameter);
        }
    
        [DbFunction("Entities", "TurnosProfesionalEspecialidad")]
        public virtual IQueryable<TurnosProfesionalEspecialidad_Result> TurnosProfesionalEspecialidad(Nullable<int> profesionalId, Nullable<int> especialidadId, string fecha)
        {
            var profesionalIdParameter = profesionalId.HasValue ?
                new ObjectParameter("profesionalId", profesionalId) :
                new ObjectParameter("profesionalId", typeof(int));
    
            var especialidadIdParameter = especialidadId.HasValue ?
                new ObjectParameter("especialidadId", especialidadId) :
                new ObjectParameter("especialidadId", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<TurnosProfesionalEspecialidad_Result>("[Entities].[TurnosProfesionalEspecialidad](@profesionalId, @especialidadId, @fecha)", profesionalIdParameter, especialidadIdParameter, fechaParameter);
        }
    
        public virtual int AltaAgendaProfesional()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AltaAgendaProfesional");
        }
    
        public virtual int CompraBono(Nullable<int> afiliadoId, Nullable<int> cant, Nullable<int> planMedicoId)
        {
            var afiliadoIdParameter = afiliadoId.HasValue ?
                new ObjectParameter("afiliadoId", afiliadoId) :
                new ObjectParameter("afiliadoId", typeof(int));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("cant", cant) :
                new ObjectParameter("cant", typeof(int));
    
            var planMedicoIdParameter = planMedicoId.HasValue ?
                new ObjectParameter("planMedicoId", planMedicoId) :
                new ObjectParameter("planMedicoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompraBono", afiliadoIdParameter, cantParameter, planMedicoIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> HorasDisponibles(Nullable<int> profesionalId, Nullable<int> especialidadId, string fechaStr)
        {
            var profesionalIdParameter = profesionalId.HasValue ?
                new ObjectParameter("profesionalId", profesionalId) :
                new ObjectParameter("profesionalId", typeof(int));
    
            var especialidadIdParameter = especialidadId.HasValue ?
                new ObjectParameter("especialidadId", especialidadId) :
                new ObjectParameter("especialidadId", typeof(int));
    
            var fechaStrParameter = fechaStr != null ?
                new ObjectParameter("fechaStr", fechaStr) :
                new ObjectParameter("fechaStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("HorasDisponibles", profesionalIdParameter, especialidadIdParameter, fechaStrParameter);
        }
    
        public virtual ObjectResult<Login_Result> Login(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_Result>("Login", usernameParameter, passwordParameter);
        }
    
        public virtual int RegistroLlegada(Nullable<int> turnoId, Nullable<int> bonoId, Nullable<System.DateTime> fechaActual)
        {
            var turnoIdParameter = turnoId.HasValue ?
                new ObjectParameter("turnoId", turnoId) :
                new ObjectParameter("turnoId", typeof(int));
    
            var bonoIdParameter = bonoId.HasValue ?
                new ObjectParameter("bonoId", bonoId) :
                new ObjectParameter("bonoId", typeof(int));
    
            var fechaActualParameter = fechaActual.HasValue ?
                new ObjectParameter("fechaActual", fechaActual) :
                new ObjectParameter("fechaActual", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistroLlegada", turnoIdParameter, bonoIdParameter, fechaActualParameter);
        }
    }
}
