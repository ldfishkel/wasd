/**SCRIPT DE CREACION INICIAL**/
/**GRUPO NUMERO 52 WASD**/
/**GESTION DE DATOS SEGUNDO CUATRIMESTRE 2016**/

USE [GD2C2016];
GO

SET LANGUAGE Spanish

/****************************************************************************************************************/
/**CREAR SCHEMA**/
/****************************************************************************************************************/
IF NOT EXISTS
(
  SELECT  schema_name
  FROM    information_schema.schemata
  WHERE   schema_name = 'WASD'
)

BEGIN
  EXEC sp_executesql N'CREATE SCHEMA "WASD" AUTHORIZATION gd'
END

/****************************************************************************************************************/
/**BORRAR TABLAS**/
/****************************************************************************************************************/
IF OBJECT_ID('WASD.Agenda', 'U') IS NOT NULL
  DROP TABLE "WASD".Agenda
GO

IF OBJECT_ID('WASD.Hora', 'U') IS NOT NULL
  DROP TABLE "WASD".Hora
GO

IF OBJECT_ID('WASD.EspecialidadPorProfesional', 'U') IS NOT NULL
  DROP TABLE "WASD".EspecialidadPorProfesional
GO

IF OBJECT_ID('WASD.FuncionalidadPorRol', 'U') IS NOT NULL
  DROP TABLE "WASD".FuncionalidadPorRol
GO

IF OBJECT_ID('WASD.Funcionalidad', 'U') IS NOT NULL
  DROP TABLE "WASD".Funcionalidad
GO

IF OBJECT_ID('WASD.HistorialPlan', 'U') IS NOT NULL
  DROP TABLE "WASD".HistorialPlan
GO

IF OBJECT_ID('WASD.Sintoma', 'U') IS NOT NULL
  DROP TABLE "WASD".Sintoma
GO

IF OBJECT_ID('WASD.Diagnostico', 'U') IS NOT NULL
  DROP TABLE "WASD".Diagnostico
GO

IF OBJECT_ID('WASD.ConsultaMedica', 'U') IS NOT NULL
  DROP TABLE "WASD".ConsultaMedica
GO

IF OBJECT_ID('WASD.Turno', 'U') IS NOT NULL
  DROP TABLE "WASD".Turno
GO

IF OBJECT_ID('WASD.Bono', 'U') IS NOT NULL
  DROP TABLE "WASD".Bono
GO

IF OBJECT_ID('WASD.Compra', 'U') IS NOT NULL
  DROP TABLE "WASD".Compra
GO

IF OBJECT_ID('WASD.Afiliado', 'U') IS NOT NULL
  DROP TABLE "WASD".Afiliado
GO

IF OBJECT_ID('WASD.PlanMedico', 'U') IS NOT NULL
  DROP TABLE "WASD".PlanMedico
GO

IF OBJECT_ID('WASD.RolPorUsuario', 'U') IS NOT NULL
  DROP TABLE "WASD".RolPorUsuario
GO

IF OBJECT_ID('WASD.Rol', 'U') IS NOT NULL
  DROP TABLE "WASD".Rol
GO

IF OBJECT_ID('WASD.Especialidad', 'U') IS NOT NULL
  DROP TABLE "WASD".Especialidad
GO

IF OBJECT_ID('WASD.TipoEspecialidad', 'U') IS NOT NULL
  DROP TABLE "WASD".TipoEspecialidad
GO

IF OBJECT_ID('WASD.EstadoCivil', 'U') IS NOT NULL
  DROP TABLE "WASD".EstadoCivil
GO

IF OBJECT_ID('WASD.Profesional', 'U') IS NOT NULL
  DROP TABLE "WASD".Profesional
GO

IF OBJECT_ID('WASD.Usuario', 'U') IS NOT NULL
  DROP TABLE "WASD".Usuario
GO

/****************************************************************************************************************/
/**CREAR TABLAS**/
/****************************************************************************************************************/

CREATE TABLE "WASD".Usuario (
	usuario_id INT PRIMARY KEY IDENTITY(1,1),
	usuario_nombre CHAR(10) NOT NULL,
	usuario_password CHAR(64) NOT NULL,
	usuario_intentos TINYINT NOT NULL,
	usuario_activo BIT NOT NULL
);

CREATE TABLE "WASD".EstadoCivil (
	estadocivil_id INT PRIMARY KEY IDENTITY(1,1),
	estadocivil_nombre CHAR(12) NOT NULL
);


CREATE TABLE "WASD".PlanMedico (
	planmedico_id INT PRIMARY KEY IDENTITY(1,1),
	planmedico_nombre CHAR(15) NOT NULL,
	planmedico_cuota MONEY NOT NULL,
	planmedico_precio_bono MONEY NOT NULL
);

CREATE TABLE "WASD".Afiliado (
	afiliado_id INT PRIMARY KEY IDENTITY(1,1),
	usuario_id INT NOT NULL REFERENCES "WASD".Usuario(usuario_id),
	estadocivil_id INT NOT NULL REFERENCES "WASD".EstadoCivil(estadocivil_id),
	afiliado_tipodocumento CHAR(3) CHECK (afiliado_tipodocumento IN ('DNI', 'CI', 'LC', 'LE')),
	planmedico_id INT NOT NULL REFERENCES "WASD".PlanMedico(planmedico_id),
	afiliado_sexo CHAR(1) CHECK (afiliado_sexo IN ('M', 'F', 'X')),
	afiliado_numero INT NOT NULL,
	afiliado_nombre VARCHAR(50) NOT NULL,
	afiliado_apellido VARCHAR(50) NOT NULL,
	afiliado_numero_documento INT NOT NULL,
	afiliado_direccion VARCHAR(100) NOT NULL,
	afiliado_telefono INT NOT NULL,
	afiliado_mail VARCHAR(50) NOT NULL,
	afiliado_fecha_nacimiento DATE NOT NULL,
	afiliado_familiares_dependientes TINYINT NOT NULL,
	afiliado_activo BIT NOT NULL,
	afiliado_grupo_familiar INT REFERENCES "WASD".Afiliado(afiliado_id),
	afiliado_cantidad_bonos_usados SMALLINT NOT NULL DEFAULT 0
);

CREATE TABLE "WASD".TipoEspecialidad (
	tipoespecialidad_id INT PRIMARY KEY IDENTITY(1,1),
	tipoespecialidad_nombre VARCHAR(50) NOT NULL
);

CREATE TABLE "WASD".Especialidad (
	especialidad_id INT PRIMARY KEY IDENTITY(1,1),
	tipoespecialidad_id INT NOT NULL REFERENCES "WASD".TipoEspecialidad(tipoespecialidad_id),
	especialidad_nombre VARCHAR(50) NOT NULL
);

CREATE TABLE "WASD".Profesional (
	profesional_id INT PRIMARY KEY IDENTITY(1,1),
	usuario_id INT NOT NULL REFERENCES "WASD".Usuario(usuario_id),
	profesional_sexo CHAR(1) CHECK (profesional_sexo IN ('M', 'F', 'X')),
	profesional_tipodocumento CHAR(3) CHECK (profesional_tipodocumento IN ('DNI', 'CI', 'LC', 'LE')),
	profesional_numero_documento INT NOT NULL,
	profesional_nombre VARCHAR(25) NOT NULL,
	profesional_apellido VARCHAR(25) NOT NULL,
	profesional_direccion VARCHAR(100) NOT NULL,
	profesional_telefono INT NOT NULL,
	profesional_mail VARCHAR(50) NOT NULL,
	profesional_fecha_nacimiento DATE NOT NULL,
	profesional_matricula INT NOT NULL
);

CREATE TABLE "WASD".Hora (
	hora_id INT PRIMARY KEY,
	hora_comienzo TIME NOT NULL
);

CREATE TABLE "WASD".Agenda (
	agenda_id INT PRIMARY KEY IDENTITY(1,1),
	profesional_id INT NOT NULL REFERENCES "WASD".Profesional(profesional_id),
	especialidad_id INT NOT NULL REFERENCES "WASD".Especialidad(especialidad_id),
	agenda_dia CHAR(9) CHECK (agenda_dia IN ('LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES', 'SABADO')),
	agenda_hora_desde INT NOT NULL REFERENCES "WASD".Hora(hora_id),
	agenda_hora_hasta INT NOT NULL REFERENCES "WASD".Hora(hora_id),
	agenda_fecha_desde DATE NOT NULL,
	agenda_fecha_hasta DATE NOT NULL
);

CREATE TABLE "WASD".Compra (
	compra_id INT PRIMARY KEY IDENTITY(1,1),
	afiliado_id INT NOT NULL REFERENCES "WASD".Afiliado(afiliado_id),
	compra_fecha_hora DATETIME NOT NULL,
	compra_cantidad SMALLINT NOT NULL,
	compra_monto MONEY NOT NULL
);

CREATE TABLE "WASD".Bono (
	bono_id INT PRIMARY KEY IDENTITY(1,1),
	planmedico_id INT NOT NULL REFERENCES "WASD".PlanMedico(planmedico_id),
	afiliado_id INT NOT NULL REFERENCES "WASD".Afiliado(afiliado_id),
	compra_id INT NOT NULL REFERENCES "WASD".Compra(compra_id),
	bono_afiliado_usado INT REFERENCES "WASD".Afiliado(afiliado_id)
);

CREATE TABLE "WASD".EspecialidadPorProfesional (
	profesional_id INT NOT NULL REFERENCES "WASD".Profesional(profesional_id),
	especialidad_id INT NOT NULL REFERENCES "WASD".Especialidad(especialidad_id),
	PRIMARY KEY (profesional_id, especialidad_id)
);

CREATE TABLE "WASD".Funcionalidad (
	funcionalidad_id INT PRIMARY KEY IDENTITY(1,1),
	funcionalidad_nombre VARCHAR(25) NOT NULL
);

CREATE TABLE "WASD".Rol (
	rol_id INT PRIMARY KEY IDENTITY(1,1),
	rol_nombre CHAR(15) NOT NULL,
	rol_activo BIT NOT NULL
);

CREATE TABLE "WASD".FuncionalidadPorRol (
	rol_id INT NOT NULL REFERENCES "WASD".Rol(rol_id),
	funcionalidad_id INT NOT NULL REFERENCES "WASD".Funcionalidad(funcionalidad_id),
	PRIMARY KEY (funcionalidad_id, rol_id)
);

CREATE TABLE "WASD".HistorialPlan (
	afiliado_id INT NOT NULL REFERENCES "WASD".Afiliado(afiliado_id),
	historial_fecha DATE NOT NULL,
	historial_motivo VARCHAR(144) NOT NULL,
	PRIMARY KEY (afiliado_id)
);

CREATE TABLE "WASD".RolPorUsuario (
	usuario_id INT NOT NULL REFERENCES "WASD".Usuario(usuario_id),
	rol_id INT NOT NULL REFERENCES "WASD".Rol(rol_id),
	PRIMARY KEY (usuario_id, rol_id)
);

CREATE TABLE "WASD".Turno (
	turno_id INT PRIMARY KEY IDENTITY(1,1),
	afiliado_id INT NOT NULL REFERENCES "WASD".Afiliado(afiliado_id),
	profesional_id INT NOT NULL REFERENCES "WASD".Profesional(profesional_id),
	especialidad_id INT NOT NULL REFERENCES "WASD".Especialidad(especialidad_id),
	turno_fecha DATE NOT NULL,
	turno_hora TIME NOT NULL,
	turno_cancelado VARCHAR(255)
);

CREATE TABLE "WASD".ConsultaMedica (
	consultamedica_id INT PRIMARY KEY,
	bono_id INT NOT NULL REFERENCES "WASD".Bono(bono_id),
	consultamedica_fecha_hora DATETIME NOT NULL,
	consultamedica_ocurrio BIT DEFAULT 0
);

CREATE TABLE "WASD".Sintoma (
	sintoma_id INT PRIMARY KEY IDENTITY(1,1),
	consultamedica_id INT NOT NULL REFERENCES "WASD".ConsultaMedica(consultamedica_id),
	sintoma_descripcion VARCHAR(255) NOT NULL
);

CREATE TABLE "WASD".Diagnostico (
	diagnostico_id INT PRIMARY KEY IDENTITY(1,1),
	consultamedica_id INT NOT NULL REFERENCES "WASD".ConsultaMedica(consultamedica_id),
	diagnostico_descripcion VARCHAR(255) NOT NULL
);

/****************************************************************************************************************/
/**SEED INICIAL**/
/****************************************************************************************************************/
SET IDENTITY_INSERT "WASD".EstadoCivil ON
INSERT INTO "WASD".EstadoCivil(estadocivil_id, estadocivil_nombre) VALUES
(1, 'Soltero/a'),
(2, 'Casado/a'),
(3, 'Viudo/a'),
(4, 'Concubinato'),
(5, 'Divorciado/a'),
(6, 'Migrado/a')
SET IDENTITY_INSERT "WASD".EstadoCivil OFF;

SET IDENTITY_INSERT "WASD".Rol ON
INSERT INTO "WASD".Rol(rol_id, rol_nombre, rol_activo) VALUES
(1, 'Administrativo', 1),
(2, 'Afiliado', 1),
(3, 'Profesional', 1)
SET IDENTITY_INSERT "WASD".Rol OFF;

SET IDENTITY_INSERT "WASD".Funcionalidad ON
INSERT INTO "WASD".Funcionalidad(funcionalidad_id, funcionalidad_nombre) VALUES
(1, 'ABM Roles'),
(2, 'ABM Afiliados'),
(3, 'Registrar Agenda'),
(4, 'Comprar Bonos'),
(5, 'Pedir Turno'),
(6, 'Cancelar Turno'),
(7, 'Registrar Llegada'),
(8, 'Diagnosticar'),
(9, 'Ver Estadisticas')
SET IDENTITY_INSERT "WASD".Funcionalidad OFF;

INSERT INTO "WASD".FuncionalidadPorRol VALUES
(1, 1),
(1, 2),
(1, 4),
(1, 7),
(1, 9),
(2, 4),
(2, 5),
(2, 6),
(3, 3),
(3, 6),
(3, 8);

SET IDENTITY_INSERT "WASD".Usuario ON
INSERT INTO "WASD".Usuario(usuario_id, usuario_nombre, usuario_password, usuario_intentos, usuario_activo) VALUES
(1, 'admin', 'e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', 0, 1)
SET IDENTITY_INSERT "WASD".Usuario OFF;

INSERT INTO GD2C2016. WASD. Profesional( usuario_id, profesional_sexo, profesional_tipodocumento, profesional_numero_documento, profesional_nombre, profesional_apellido, profesional_direccion, profesional_telefono, profesional_mail, profesional_fecha_nacimiento, profesional_matricula) VALUES
(1, 'M', 'DNI', 36157488, 'Dr Leonel', 'Dan', 'Uriburu', 12345, 'asd@asd.asd', '1-9-1992', 321561);

INSERT INTO "WASD".RolPorUsuario VALUES
(1, 1);
INSERT INTO "WASD".RolPorUsuario VALUES
(1, 2);
INSERT INTO "WASD".RolPorUsuario VALUES
(1, 3);

INSERT INTO "WASD".Hora VALUES
(1, '07:00'),
(2, '07:30'),
(3, '08:00'),
(4, '08:30'),
(5, '09:00'),
(6, '09:30'),
(7, '10:00'),
(8, '10:30'),
(9, '11:00'),
(10, '11:30'),
(11, '12:00'),
(12, '12:30'),
(13, '13:00'),
(14, '13:30'),
(15, '14:00'),
(16, '14:30'),
(17, '15:00'),
(18, '15:30'),
(19, '16:00'),
(20, '16:30'),
(21, '17:00'),
(22, '17:30'),
(23, '18:00'),
(24, '18:30'),
(25, '19:00'),
(26, '19:30');

/****************************************************************************************************************/
/**MIGRACION**/
/****************************************************************************************************************/

/**PLANES**/
SET IDENTITY_INSERT "WASD".PlanMedico ON
INSERT INTO "WASD".PlanMedico(planmedico_id, planmedico_nombre, planmedico_cuota, planmedico_precio_bono)
SELECT DISTINCT Plan_Med_Codigo, Plan_Med_Descripcion, Plan_Med_Precio_Bono_Consulta, Plan_Med_Precio_Bono_Farmacia
FROM gd_esquema.Maestra
WHERE Plan_Med_Codigo IS NOT NULL
ORDER BY Plan_Med_Codigo ASC
SET IDENTITY_INSERT "WASD".PlanMedico OFF;

/*Afiliado de pruebas puesto aca por la necesidad de tener planes medicos creados previamente*/
SET IDENTITY_INSERT "WASD".Afiliado ON;
INSERT INTO "WASD".Afiliado(afiliado_id,  usuario_id, estadocivil_id, afiliado_tipodocumento, planmedico_id, afiliado_sexo, afiliado_numero, afiliado_nombre, afiliado_apellido, afiliado_numero_documento, afiliado_direccion, afiliado_telefono, afiliado_mail, afiliado_fecha_nacimiento, afiliado_familiares_dependientes, afiliado_activo, afiliado_grupo_familiar, afiliado_cantidad_bonos_usados) VALUES
(1, 1, 1, 'DNI', 555555, 'M', 999999900, 'Leonel', 'Dan', 36157488, 'Humboldt', 1168567706, 'asd@asd.asd', '9-1-1992', 0, 1, NULL, 0);
SET IDENTITY_INSERT "WASD".Afiliado OFF;

/**TIPOS DE ESPECIALIDADES**/
SET IDENTITY_INSERT "WASD".TipoEspecialidad ON
INSERT INTO "WASD".TipoEspecialidad(tipoespecialidad_id, tipoespecialidad_nombre)
SELECT DISTINCT Tipo_Especialidad_Codigo, Tipo_Especialidad_Descripcion
FROM gd_esquema.Maestra
WHERE Tipo_Especialidad_Codigo IS NOT NULL
ORDER BY Tipo_Especialidad_Codigo ASC
SET IDENTITY_INSERT "WASD".TipoEspecialidad OFF;

/**ESPECIALIDADES**/
SET IDENTITY_INSERT "WASD".Especialidad ON
INSERT INTO "WASD".Especialidad(especialidad_id, tipoespecialidad_id, especialidad_nombre)
SELECT DISTINCT Especialidad_Codigo, Tipo_Especialidad_Codigo, Especialidad_Descripcion
FROM gd_esquema.Maestra
WHERE Especialidad_Codigo IS NOT NULL
ORDER BY Especialidad_Codigo ASC
SET IDENTITY_INSERT "WASD".Especialidad OFF;

/**PROFESIONALES**/
DECLARE profesionales CURSOR FOR
SELECT DISTINCT Medico_Dni, Medico_Apellido, Medico_Nombre, Medico_Direccion, Medico_Telefono, Medico_Mail, Medico_Fecha_Nac
FROM gd_esquema.Maestra
WHERE Medico_Dni IS NOT NULL
ORDER BY Medico_Apellido ASC;

DECLARE @ape VARCHAR(50)
DECLARE @nom VARCHAR(50)
DECLARE @dni INT
DECLARE @dir VARCHAR(100)
DECLARE @tel INT
DECLARE @mail VARCHAR(50)
DECLARE @nac DATE
DECLARE @usid INT;

OPEN profesionales
FETCH FROM profesionales INTO @dni, @ape, @nom, @dir, @tel, @mail, @nac
WHILE @@FETCH_STATUS = 0
BEGIN
	/**CREAMOS EL USUARIO DEL PROFESIONAL**/
	INSERT INTO "WASD".Usuario(usuario_nombre, usuario_password, usuario_intentos, usuario_activo) VALUES
	(@dni, '8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92', 0, 1)
	SET @usid = (SELECT SCOPE_IDENTITY())
	
	/**ASIGNAMOS EL ROL DE PROFESIONAL**/
	INSERT INTO "WASD".RolPorUsuario VALUES (@usid, 3)
	
	/**CREAMOS EL REGISTRO DEL PROFESIONAL**/
	INSERT INTO "WASD".Profesional(usuario_id, profesional_nombre, profesional_apellido, profesional_direccion,
	profesional_telefono, profesional_mail, profesional_fecha_nacimiento, profesional_sexo, profesional_matricula,
	profesional_tipodocumento, profesional_numero_documento) VALUES
	(@usid, @nom, @ape, @dir, @tel, @mail, (SELECT CAST(@nac AS DATE)), 'X', @dni, 'DNI', @dni)
	FETCH NEXT FROM profesionales INTO @dni, @ape, @nom, @dir, @tel, @mail, @nac
END
CLOSE profesionales
DEALLOCATE profesionales;
GO

/**ESPECIALIDADES POR PROFESIONAL**/
DECLARE profesionales CURSOR FOR
SELECT DISTINCT Medico_Dni, Especialidad_Codigo
FROM gd_esquema.Maestra
WHERE Medico_Dni IS NOT NULL
ORDER BY Medico_Dni ASC

DECLARE @dni INT
DECLARE @dniant INT
DECLARE @esp INT
DECLARE @profid INT

SET @dniant = 0
OPEN profesionales
FETCH FROM profesionales INTO @dni, @esp
WHILE @@FETCH_STATUS = 0
BEGIN
	IF (@dniant != @dni)
	BEGIN
		SET @dniant = @dni
		SET @profid = (SELECT profesional_id FROM WASD.Profesional WHERE profesional_numero_documento = @dni)
	END
	INSERT INTO "WASD".EspecialidadPorProfesional VALUES (@profid, @esp)
	FETCH NEXT FROM profesionales INTO @dni, @esp
END
CLOSE profesionales
DEALLOCATE profesionales;
GO

/**AFILIADOS**/
DECLARE afiliados CURSOR FOR
SELECT DISTINCT Paciente_Dni, Paciente_Apellido, Paciente_Nombre, Paciente_Direccion, Paciente_Telefono, Paciente_Mail,
Paciente_Fecha_Nac, Plan_Med_Codigo
FROM gd_esquema.Maestra
WHERE Paciente_Dni IS NOT NULL
ORDER BY Paciente_Apellido ASC

DECLARE @ape VARCHAR(50)
DECLARE @nom VARCHAR(50)
DECLARE @dni INT
DECLARE @dir VARCHAR(100)
DECLARE @tel INT
DECLARE @mail VARCHAR(50)
DECLARE @nac DATE
DECLARE @cod INT
DECLARE @civ INT
DECLARE @num INT
DECLARE @usid INT
DECLARE @bonos SMALLINT

SET @num = 100

OPEN afiliados
FETCH FROM afiliados INTO @dni, @ape, @nom, @dir, @tel, @mail, @nac, @cod
WHILE @@FETCH_STATUS = 0
BEGIN
	/**CREAMOS EL USUARIO DEL AFILIADO**/
	/**USUARIO: el numero de DNI**/
	/**PASSWORD: 123456**/
	INSERT INTO "WASD".Usuario(usuario_nombre, usuario_password, usuario_intentos, usuario_activo) VALUES
	(@dni, '8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92', 0, 1)
	SET @usid = (SELECT SCOPE_IDENTITY())
	
	/**ASIGNAMOS EL ROL DE AFILIADO**/
	INSERT INTO "WASD".RolPorUsuario VALUES (@usid, 2)

	/**CONTAMOS BONOS
	SET @bonos = (
		SELECT COUNT(*)
		FROM gd_esquema.Maestra
		WHERE Consulta_Sintomas IS NOT NULL
		AND Paciente_Dni = @dni)**/
	SET @bonos = 0
	
	/**CREAMOS EL REGISTRO DE AFILIADO**/
	INSERT INTO "WASD".Afiliado(usuario_id, afiliado_numero, afiliado_nombre, afiliado_apellido, afiliado_direccion,
	afiliado_telefono, afiliado_mail, afiliado_fecha_nacimiento, afiliado_sexo, afiliado_tipodocumento,
	afiliado_numero_documento, estadocivil_id, planmedico_id, afiliado_familiares_dependientes, afiliado_activo,
	afiliado_grupo_familiar, afiliado_cantidad_bonos_usados) VALUES
	(@usid, @num, @nom, @ape, @dir, @tel, @mail, (SELECT CAST(@nac AS DATE)), 'X', 'DNI', @dni, 6, @cod, 0, 1, NULL, @bonos)
	
	SET @num += 100
	FETCH NEXT FROM afiliados INTO @dni, @ape, @nom, @dir, @tel, @mail, @nac, @cod
END
CLOSE afiliados
DEALLOCATE afiliados;
GO

/**COMPRAS**/
INSERT INTO "WASD".Compra
SELECT a.afiliado_id, m.Compra_Bono_Fecha, COUNT(*), COUNT(*) * p.planmedico_precio_bono
FROM gd_esquema.Maestra m, WASD.Afiliado a, WASD.PlanMedico p
WHERE m.Compra_Bono_Fecha IS NOT NULL
AND m.Paciente_Dni = a.afiliado_numero_documento
AND a.planmedico_id = p.planmedico_id
GROUP BY m.Compra_Bono_Fecha, a.afiliado_id, p.planmedico_precio_bono
ORDER BY afiliado_id;
GO

/**BONOS**/
SET IDENTITY_INSERT "WASD".Bono ON
INSERT INTO "WASD".Bono(bono_id, planmedico_id, afiliado_id, compra_id, bono_afiliado_usado)
SELECT m1.Bono_Consulta_Numero, m1.Plan_Med_Codigo, a.afiliado_id, c.compra_id, a.afiliado_id
FROM WASD.Afiliado a, WASD.Compra c,
(SELECT
	MAX(Plan_Med_Codigo) as Plan_Med_Codigo,
	MAX(Paciente_Dni) as Paciente_Dni,
	Bono_Consulta_Numero,
	MAX(Turno_Fecha) as Turno_Fecha,
	MAX(Compra_Bono_Fecha) as Compra_Bono_Fecha
	FROM gd_esquema.Maestra
	WHERE Bono_Consulta_Numero IS NOT NULL
	GROUP BY Bono_Consulta_Numero) m1
WHERE a.afiliado_numero_documento = m1.Paciente_Dni
AND a.afiliado_id = c.afiliado_id
AND c.compra_fecha_hora = m1.Compra_Bono_Fecha
ORDER BY m1.Bono_Consulta_Numero
SET IDENTITY_INSERT "WASD".Bono OFF;
GO

/**TURNOS**/
SET IDENTITY_INSERT "WASD".Turno ON
INSERT INTO "WASD".Turno(turno_id, afiliado_id, profesional_id, especialidad_id, turno_fecha, turno_hora, turno_cancelado)
SELECT m.Turno_Numero, a.afiliado_id, p.profesional_id, m.Especialidad_Codigo, (SELECT CAST(m.Turno_Fecha AS DATE)),
(SELECT CAST(m.Turno_Fecha AS TIME)), NULL
FROM gd_esquema.Maestra m, "WASD".Afiliado a, "WASD".Profesional p
WHERE m.Turno_Numero IS NOT NULL
AND m.Consulta_Sintomas IS NOT NULL
AND m.Paciente_Dni = a.afiliado_numero_documento
AND m.Medico_Dni = p.profesional_numero_documento
ORDER BY m.Turno_Numero ASC
SET IDENTITY_INSERT "WASD".Turno OFF;
GO

/**CONSULTAS MEDICAS**/
INSERT INTO "WASD".ConsultaMedica(consultamedica_id, bono_id, consultamedica_fecha_hora)
SELECT Turno_Numero, Bono_Consulta_Numero, Turno_Fecha
FROM gd_esquema.Maestra
WHERE Turno_Numero IS NOT NULL
AND Bono_Consulta_Numero IS NOT NULL
ORDER BY Turno_Numero ASC;
GO

/**SINTOMAS**/
INSERT INTO "WASD".Sintoma(consultamedica_id, sintoma_descripcion)
SELECT Turno_Numero, Consulta_Sintomas
FROM gd_esquema.Maestra
WHERE Consulta_Sintomas IS NOT NULL
ORDER BY Turno_Numero ASC;
GO

/**DIAGNOSTICOS**/
INSERT INTO "WASD".Diagnostico(consultamedica_id, diagnostico_descripcion)
SELECT Turno_Numero, Consulta_Enfermedades
FROM gd_esquema.Maestra
WHERE Consulta_Enfermedades IS NOT NULL
ORDER BY Turno_Numero ASC;
GO


/****************************************************************************************************************/
/**VISTAS**/
/***********************************************************************************************************/

/**LISTADO DE ESPECIALIDADES**/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 'ListaEspecialidades' AND xtype = 'V')
	DROP VIEW WASD.ListaEspecialidades;
GO

CREATE VIEW "WASD".ListaEspecialidades
AS
	SELECT 
		*
	FROM 
		"WASD".Especialidad;
GO

/**LISTADO DE TIPO DE ESPECIALIDADES**/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 'ListaTipoEspecialidades' AND xtype = 'V')
	DROP VIEW WASD.ListaTipoEspecialidades;
GO

CREATE VIEW "WASD".ListaTipoEspecialidades
AS
	SELECT 
		*
	FROM 
		"WASD".TipoEspecialidad;
GO

/****************************************************************************************************************/
/**FUNCIONES**/
/****************************************************************************************************************/

/**LISTADO DE PROFESIONALES POR ESPECIALIDAD**/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 'ProfesionalesDeEspecialidad' AND xtype = 'IF')
	DROP FUNCTION WASD.ProfesionalesDeEspecialidad;
GO

CREATE FUNCTION "WASD".ProfesionalesDeEspecialidad (@especialidad INT) RETURNS TABLE
AS RETURN (
	SELECT 
		p.profesional_id, 
		p.profesional_apellido, 
		p.profesional_nombre
	FROM 
		WASD.Profesional p,
		WASD.EspecialidadPorProfesional e
	WHERE
		p.profesional_id = e.profesional_id AND
		e.especialidad_id = @especialidad
);
GO

/**LISTADO DE ESPECIALIDADES POR TIO DE ESPECIALIDAD**/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 'EspecialidadesDeTipo' AND xtype = 'IF')
	DROP FUNCTION WASD.EspecialidadesDeTipo;
GO

CREATE FUNCTION "WASD".EspecialidadesDeTipo(@tipoEspecialidad INT) RETURNS TABLE
AS RETURN (
	SELECT 
		*
	FROM 
		WASD.Especialidad
	WHERE 
	 	tipoespecialidad_id = @tipoEspecialidad
);
GO

/**FECHAS DISPONIBLES DE UN PROFESIONAL EN UNA ESPECIALIDAD SEGUN SU AGENDA**/
IF OBJECT_ID(N'WASD.FechasDisponibles', N'TF') IS NOT NULL
	DROP FUNCTION "WASD".FechasDisponibles;
GO

CREATE FUNCTION "WASD".FechasDisponibles (@profesionalId INT, @especialidadId INT) RETURNS @retFechas TABLE (Fecha DATE NOT NULL)
AS BEGIN
	DECLARE @Date1 DATE, @Date2 DATE, @Fecha DATE;

	SELECT 
		@Date1 = agenda_fecha_desde, 
		@Date2 = agenda_fecha_hasta 
	FROM
		"WASD".Agenda
	WHERE 
		profesional_id = @profesionalId AND 
		especialidad_id = @especialidadId;
		
    DECLARE fechasCursor CURSOR FOR
	
	SELECT 
		DATEADD(DAY, number + 1, @Date1) 
	FROM 
		master..spt_values
	WHERE 
		type = 'P' AND 
		DATEADD(DAY, number + 1, @Date1) <= @Date2;

	OPEN fechasCursor

	FETCH FROM fechasCursor INTO @Fecha
	
	WHILE @@FETCH_STATUS = 0
	
	BEGIN
		if (DATEPART(dw, @Fecha) IN (SELECT 
										CASE RTRIM(agenda_dia) 
										WHEN 'LUNES' THEN 2
										WHEN 'MARTES' THEN 3
										WHEN 'MIERCOLES' THEN 4
										WHEN 'JUEVES' THEN 5
										WHEN 'VIERNES' THEN 6
										WHEN 'SABADO' THEN 7
										END
									FROM 
										"WASD".Agenda
									WHERE
										profesional_id = @profesionalId AND 
										especialidad_id = @especialidadId))
			INSERT INTO @retFechas VALUES (@Fecha)
		
		FETCH NEXT FROM fechasCursor INTO @Fecha
	END

	CLOSE fechasCursor
	
	DEALLOCATE fechasCursor;
	
	RETURN; 
END;
GO

/**BONOS DISPONIBLES PARA USAR DE UN AFILIADO Y SU GRUPO FAMILIAR**/
IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id(N'WASD.BonosNroAfiliado') AND xtype IN (N'FN', N'IF', N'TF')) 
	DROP FUNCTION "WASD".BonosNroAfiliado
GO

CREATE FUNCTION "WASD".BonosNroAfiliado (@nroAfiliado INT) RETURNS TABLE 
AS RETURN 
	SELECT 
		b.bono_id 
	FROM 
		"WASD".Bono b,
		"WASD".Afiliado a
	WHERE 
		b.bono_afiliado_usado IS NULL AND
		b.afiliado_id = a.afiliado_id AND
		CAST(ROUND(a.afiliado_numero / 100, 0, 1) AS INT) = CAST(ROUND(@nroAfiliado / 100, 0, 1) AS INT) AND
		a.planmedico_id = b.planmedico_id;
GO

/**LISTA DE TURNOS DEL DIA DE UN PROFESIONAL FILTRADO POR ESPECIALIDAD PARA EL REGISTRO DE LLEGADA**/
IF OBJECT_ID(N'WASD.TurnosProfesionalEspecialidad', N'TF') IS NOT NULL
	DROP FUNCTION "WASD".TurnosProfesionalEspecialidad;
GO

CREATE FUNCTION "WASD".TurnosProfesionalEspecialidad (@profesionalId INT, @especialidadId INT, @fecha VARCHAR(10)) RETURNS TABLE 
AS RETURN 
	SELECT
		t.*, 
		a.afiliado_nombre, 
		a.afiliado_apellido, 
		a.afiliado_numero, 
		a.afiliado_numero_documento,
		e.especialidad_nombre
	FROM
		"WASD".Turno t, 
		"WASD".Afiliado a, 
		"WASD".Especialidad e
	WHERE
		t.especialidad_id = e.especialidad_id AND
		t.afiliado_id = a.afiliado_id AND
		t.profesional_id = @profesionalId AND
		t.especialidad_id = @especialidadId AND
		t.turno_fecha = CONVERT(DATE,@fecha, 103) AND
		t.turno_id NOT IN (SELECT 
								consultamedica_id
							FROM
								"WASD".ConsultaMedica
							WHERE
								profesional_id = t.profesional_id);
GO


/****************************************************************************************************************/
/**PROCEDURES**/
/****************************************************************************************************************/

/**COMPRA DE BONOS**/
IF EXISTS (SELECT type_desc, type FROM sys.procedures WITH(NOLOCK) WHERE NAME = 'CompraBono' AND type = 'P')
DROP PROCEDURE WASD.CompraBono;
GO

CREATE PROCEDURE "WASD".CompraBono @afiliadoId INT, @cant INT, @planMedicoId INT
AS
BEGIN
	DECLARE @fecha DATETIME = GETDATE(); --parametrizar este campo
	DECLARE @monto MONEY;
	DECLARE @compra_id INT
	DECLARE @intFlag INT = 1;

	SELECT 
		@monto = planmedico_precio_bono * @cant
    FROM 
    	"WASD".PlanMedico
    WHERE 
    	planmedico_id = @planMedicoId; 

	INSERT INTO 
		"WASD".Compra (afiliado_id, compra_fecha_hora, compra_cantidad, compra_monto)
    VALUES 
    	(@afiliadoId, @fecha, @cant, @monto);

    SET @compra_id = (SELECT SCOPE_IDENTITY())
	
	WHILE (@intFlag <= @cant)
	BEGIN
	
		INSERT INTO 
			"WASD".Bono(planmedico_id, afiliado_id, compra_id, bono_afiliado_usado)
		VALUES
			(@planMedicoId, @afiliadoId, @compra_id, NULL);
		
		SET @intFlag = @intFlag + 1
	END
END;
GO

/**REGISTRO DE LLEGADA, USO DE BONO, CREACION DE CONSULTA MEDICA**/
IF EXISTS (SELECT type_desc, type FROM sys.procedures WITH(NOLOCK) WHERE NAME = 'RegistroLlegada' AND type = 'P')
DROP PROCEDURE WASD.RegistroLlegada;
GO

CREATE PROCEDURE "WASD".RegistroLlegada @turnoId INT, @bonoId INT, @fechaActual DATETIME
AS
BEGIN
	DECLARE @afiliadoId INT;

	SELECT 
		@afiliadoId = afiliado_id
	FROM 
		WASD.Turno
	WHERE 
		turno_id = @turnoId;

	UPDATE 
		WASD.Bono
	SET
		bono_afiliado_usado = @afiliadoId
	WHERE
		bono_id = @bonoId;

	INSERT INTO 
		WASD.ConsultaMedica (consultamedica_id,	bono_id, consultamedica_fecha_hora, consultamedica_ocurrio)
	VALUES
		(@turnoId, @bonoId, @fechaActual, 0);
END;
GO


/**HORAS DISPONIBLES DADA UNA FECHA DISPONIBLE **/
IF EXISTS (SELECT type_desc, type FROM sys.procedures WITH(NOLOCK) WHERE NAME = 'HorasDisponibles' AND type = 'P')
     DROP PROCEDURE WASD.HorasDisponibles;
GO

CREATE PROCEDURE "WASD".HorasDisponibles (@profesionalId INT, @especialidadId INT, @fechaStr VARCHAR(10))
AS BEGIN
	SET LANGUAGE Spanish

	DECLARE @desde INT, @hasta INT, @hora INT;
	DECLARE @fecha DATE = CONVERT(DATE, @fechaStr, 103);
	DECLARE @horaDesde TIME, @horaHasta TIME;
	
	SELECT 
		@desde = agenda_hora_desde, 
		@hasta = agenda_hora_hasta 
	FROM 
		"WASD".Agenda
	WHERE 
		profesional_id = @profesionalId AND 
		especialidad_id = @especialidadId AND
		@fecha BETWEEN agenda_fecha_desde AND agenda_fecha_hasta AND
		UPPER(DATEPART(dw, @fecha)) = (CASE RTRIM(agenda_dia) 
										WHEN 'LUNES' THEN 1
										WHEN 'MARTES' THEN 2
										WHEN 'MIERCOLES' THEN 3
										WHEN 'JUEVES' THEN 4
										WHEN 'VIERNES' THEN 5
										WHEN 'SABADO' THEN 6
										END);

	SELECT
		@horaDesde = hora_comienzo
	FROM 
		"WASD".Hora
	WHERE hora_id = @desde;

	SELECT
		@horaHasta = hora_comienzo
	FROM 
		"WASD".Hora
	WHERE hora_id = @hasta;
		
	WITH gen AS (
		SELECT @desde AS num
		UNION ALL
		SELECT num + 1 FROM gen WHERE num + 1 <= @hasta
	)
	SELECT 
		* 
	FROM 
		gen
	WHERE 
		num NOT IN (SELECT 
						hora_id
					FROM 
						"WASD".Hora
					WHERE hora_comienzo IN (SELECT 
												turno_hora
											FROM 
												"WASD".Turno 
											WHERE 
												turno_hora BETWEEN @horaDesde AND @horaHasta AND
												profesional_id = @profesionalId AND
												especialidad_id = @especialidadId AND
												turno_fecha = @fecha)
					);
END;
GO

/****************************************************************************************************************/
/**TRIGGERS**/
/****************************************************************************************************************/

/**TRIGGER DEL BORRADO LOGICO DE UN ROL**/
IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[WASD].[RolDeleted]'))
DROP TRIGGER [WASD].[RolDeleted];
GO

CREATE TRIGGER "WASD".RolDeleted ON "WASD".Rol FOR UPDATE
AS BEGIN
	DECLARE @rol INT
	DECLARE @activo BIT 
	
	SELECT 
		@rol = inserted.rol_id, 
		@activo = inserted.rol_activo 
	FROM 
		inserted;

	IF (@activo = 0)
	
		DELETE 
			"WASD".RolPorUsuario 
		WHERE 
			rol_id = @rol
    
END;
GO


/****************************************************************************************************************/
/**SEED FINAL**/
/****************************************************************************************************************/
/*Relacion entre Profesional de pruebas y especialidades de la migracion*/
INSERT INTO "WASD".EspecialidadPorProfesional VALUES
(1, 10016),
(1, 10017);
